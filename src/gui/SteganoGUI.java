/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;
import crypto.*;
import stegano.*;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.imageio.stream.ImageOutputStream;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
/**
 *
 * @author Edwin
 */
public class SteganoGUI extends javax.swing.JFrame {

    //Attributes
    VigenereCipher VC;
    ImageLoader IL;
    MessageLoader ML;
    BPCS bpcs;
    BufferedImage pictureOutput;
    int countM;
    String key;
    /**
     * Creates new form SteganoGUI
     */
    public SteganoGUI() {
        initComponents();
        VC = new VigenereCipher();
        IL = new ImageLoader();
        ML = new MessageLoader();
        bpcs = new BPCS();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionGroup = new javax.swing.ButtonGroup();
        styleGroup = new javax.swing.ButtonGroup();
        algoGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        executeButton = new javax.swing.JButton();
        cryptoKey = new javax.swing.JTextField();
        cryptoKeyLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        inputMessage = new javax.swing.JTextArea();
        openMessageButton = new javax.swing.JButton();
        keyLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outputMessage = new javax.swing.JTextArea();
        keyLabel2 = new javax.swing.JLabel();
        actionPanel = new javax.swing.JPanel();
        insertMessageOption = new javax.swing.JRadioButton();
        extractMesssageOption = new javax.swing.JRadioButton();
        encryptCheckbox = new javax.swing.JCheckBox();
        decryptCheckbox = new javax.swing.JCheckBox();
        saveButton = new javax.swing.JButton();
        keyLabel3 = new javax.swing.JLabel();
        openImageButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        inputThreshold = new javax.swing.JTextField();
        inputImageLabel = new javax.swing.JLabel();
        outputImageLabel = new javax.swing.JLabel();
        keyLabel4 = new javax.swing.JLabel();
        saveStegoImage = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        PSNRVal = new javax.swing.JLabel();
        stegoKeyLabel = new javax.swing.JLabel();
        stegoKey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BPCS Stegano");

        executeButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        executeButton.setText("Execute");
        executeButton.setName(""); // NOI18N
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        cryptoKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        cryptoKeyLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cryptoKeyLabel.setText("Crypto Key");

        inputMessage.setColumns(20);
        inputMessage.setRows(5);
        inputMessage.setText("Default Message");
        jScrollPane1.setViewportView(inputMessage);

        openMessageButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        openMessageButton.setText("Open Message");
        openMessageButton.setName(""); // NOI18N
        openMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMessageButtonActionPerformed(evt);
            }
        });

        keyLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel1.setText("Message :");

        outputMessage.setEditable(false);
        outputMessage.setColumns(20);
        outputMessage.setRows(5);
        jScrollPane2.setViewportView(outputMessage);

        keyLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel2.setText("Output Image:");

        actionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Action", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        actionGroup.add(insertMessageOption);
        insertMessageOption.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        insertMessageOption.setSelected(true);
        insertMessageOption.setText("Insert Message");
        insertMessageOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertMessageOptionActionPerformed(evt);
            }
        });

        actionGroup.add(extractMesssageOption);
        extractMesssageOption.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        extractMesssageOption.setText("Extract Message");
        extractMesssageOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractMesssageOptionActionPerformed(evt);
            }
        });

        encryptCheckbox.setText("encrypt");

        decryptCheckbox.setText("decrypt");
        decryptCheckbox.setEnabled(false);

        javax.swing.GroupLayout actionPanelLayout = new javax.swing.GroupLayout(actionPanel);
        actionPanel.setLayout(actionPanelLayout);
        actionPanelLayout.setHorizontalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(insertMessageOption)
                    .addComponent(extractMesssageOption))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(encryptCheckbox)
                    .addComponent(decryptCheckbox))
                .addGap(43, 43, 43))
        );
        actionPanelLayout.setVerticalGroup(
            actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(actionPanelLayout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(insertMessageOption)
                    .addComponent(encryptCheckbox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(actionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(extractMesssageOption)
                    .addComponent(decryptCheckbox)))
        );

        saveButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveButton.setLabel("Save Message");
        saveButton.setName(""); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        keyLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel3.setText("Image :");

        openImageButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        openImageButton.setText("Open Image");
        openImageButton.setName(""); // NOI18N
        openImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openImageButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Threshold");

        inputThreshold.setText("0.5");

        inputImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        outputImageLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        outputImageLabel.setName(""); // NOI18N

        keyLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        keyLabel4.setText("Output Message:");

        saveStegoImage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveStegoImage.setLabel("Save Image");
        saveStegoImage.setName(""); // NOI18N
        saveStegoImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveStegoImageActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("PSNR value :");

        PSNRVal.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        PSNRVal.setText("0");

        stegoKeyLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        stegoKeyLabel.setText("Stego Key");

        stegoKey.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(inputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(keyLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(openImageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(keyLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(openMessageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(executeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                            .addComponent(keyLabel4)
                                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabel1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(inputThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(cryptoKeyLabel))
                                                .addGap(0, 0, Short.MAX_VALUE))))
                                    .addComponent(jScrollPane1)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(cryptoKey, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(stegoKeyLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(stegoKey, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(71, 71, 71))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PSNRVal))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(keyLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(saveStegoImage, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(outputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(598, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keyLabel3)
                            .addComponent(openImageButton))
                        .addGap(18, 18, 18)
                        .addComponent(inputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keyLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(saveStegoImage))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(PSNRVal))
                        .addGap(8, 8, 8)
                        .addComponent(outputImageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(keyLabel1)
                            .addComponent(openMessageButton))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cryptoKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cryptoKeyLabel))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(stegoKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(stegoKeyLabel))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(inputThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(actionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(executeButton)
                                .addGap(35, 35, 35)))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveButton)
                            .addComponent(keyLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        keyLabel2.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed

        //set threshold
        MessageLoader.threshold = Double.parseDouble(inputThreshold.getText());
        System.out.println(MessageLoader.threshold);
        
        IL.countComplexity();
        bpcs.setImageTargetBitPlane(IL.targetBitPlane);
        
        System.out.println(IL.targetBitPlane.size());

        bpcs.setImageMtxBitPlane( IL.mtxBitPlane, IL.width, IL.height);
        
       if(insertMessageOption.isSelected()){ // do stegano
           
           //get message
           ArrayList<String> al = new ArrayList<String>();
           
           // The string we want to convert.
           String letters = inputMessage.getText();
           countM = letters.length();
           // encrypt with Vigenere
           if(this.encryptCheckbox.isSelected()){
               letters = VC.Encrypt(letters, this.cryptoKey.getText(), 26);
               key = this.cryptoKey.getText();
               System.out.println("letters: "+ letters);
               System.out.println("decrypt: "+ VC.Decrypt(letters, this.cryptoKey.getText(), 26));
           }
           
           al = ML.toByteMessage(letters);
           ML.toRegions(al);
//           System.out.println("bpcs mes reg before");
//           System.out.println(ML.regions);
           ML.conjugateRegion();

           bpcs.messageRegions = ML.regions;
           
           if(bpcs.doStegano()== 1){
                bpcs.toStegoByteArray();
                IL.setImageBytes(bpcs.getStegoByteArray());
        //        IL.setImageBytes(IL.imageBytes);

                try {
                    pictureOutput = IL.createImageFromBytes(IL.getImageBytes());
                } catch (IOException ex) {
                    Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                ImageIcon iconOut = new ImageIcon(pictureOutput);
                outputImageLabel.setIcon(iconOut);

                //print stego key
                String stegoKey = "";
                for(int k=0; k<bpcs.messageRegions.size(); k++){
                    stegoKey += Integer.toString(bpcs.getImageTargetBitPlane().get(k).getKey())+","+Integer.toString(bpcs.getImageTargetBitPlane().get(k).getValue());
                    if(k<bpcs.messageRegions.size()-1)
                        stegoKey += " ";
     //               System.out.println("stego: "+stegoKey);
                }
                this.stegoKey.setText(stegoKey);
                this.PSNRVal.setText(Double.toString(bpcs.printPSNR(IL.oriBytes, IL.OutImage, IL.width, IL.height)));
           }
           else{ // overload message
               JOptionPane.showMessageDialog(null, "Message Overload !", "InfoBox: " + "Error", JOptionPane.INFORMATION_MESSAGE);
           }
       }
       else{ // extract message from stego image
//            System.out.println("a");
            
            String s = "";
            ML.reverseConjugateRegion();
            bpcs.messageRegions = ML.regions;

            for(int i=0; i<bpcs.messageRegions.size(); i++){
                s += ML.toStringMessage(IL.mtxBitPlane.get(IL.targetBitPlane.get(i).getKey()).get(IL.targetBitPlane.get(i).getValue()));
                System.out.println(s);
            }
            System.out.println("extract message: " + s);
            //decrypt message if needed
            if(this.decryptCheckbox.isSelected()){
                if (key.equals(this.cryptoKey.getText()) ){
                    System.out.println("s length: " + s.length());
                    s = VC.Decrypt(s, this.cryptoKey.getText(), 26);
                    System.out.println("decrypt: " + s);
                    
                } else {
                    JOptionPane.showMessageDialog(null, "Wrong key !", "InfoBox: " + "Error", JOptionPane.INFORMATION_MESSAGE);
                }
            }
           outputMessage.setText(s.substring(0,countM));
       }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void openMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMessageButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        
        // process selected file
        String filePath = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            filePath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }
        
        //load selected file
        FileReader fileReader = null;
        try {
            fileReader = new FileReader(filePath);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // Always wrap FileReader in BufferedReader.
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        try {
            inputMessage.read(bufferedReader, filePath);
        } catch (IOException ex) {
            Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_openMessageButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showSaveDialog(this);
       
        // process selected file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try (BufferedWriter fileOut = new BufferedWriter(new FileWriter(file))) {
                outputMessage.write(fileOut);
            } catch (IOException ex) {
                Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void openImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openImageButtonActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        
        // process selected file
        String filePath = null;
        File file = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            filePath = file.getAbsolutePath();
        } else {
            System.out.println("File access cancelled by user.");
        }
        IL.imagePath = filePath;
        
        //load selected file
        BufferedImage pictureOutput = null;
        BufferedImage myPicture = null;
        try {
            myPicture = ImageIO.read(file);
            ImageIcon icon = new ImageIcon(myPicture); 
            inputImageLabel.setIcon(icon);
        } catch (IOException ex) {
            Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        IL.setImage(myPicture);
        
        try {
            IL.toByteImage();
        } catch (IOException ex) {
            Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
//        System.out.println("==================================================================================================================================================================================================");
//        System.out.println(IL.binaryImage);
//        System.out.println("==================================================================================================================================================================================================");
        
        IL.toRegions();
        
        IL.allRegionBitPlanes();
        
    }//GEN-LAST:event_openImageButtonActionPerformed

    private void saveStegoImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveStegoImageActionPerformed
        // TODO add your handling code here:
        int returnVal = fileChooser.showSaveDialog(this);
       
        // process selected file
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            try {
                FileOutputStream out = new FileOutputStream(file);
//                System.out.println("outimage: "+IL.OutImage.length);
                out.write(IL.OutImage);
                out.flush();
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(SteganoGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        } else {
            //System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveStegoImageActionPerformed

    private void insertMessageOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertMessageOptionActionPerformed
        // TODO add your handling code here:
        this.decryptCheckbox.setSelected(false);
        this.decryptCheckbox.setEnabled(false);
        this.encryptCheckbox.setEnabled(true);
    }//GEN-LAST:event_insertMessageOptionActionPerformed

    private void extractMesssageOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractMesssageOptionActionPerformed
        // TODO add your handling code here:
        this.encryptCheckbox.setSelected(false);
        this.encryptCheckbox.setEnabled(false);
        this.decryptCheckbox.setEnabled(true);
    }//GEN-LAST:event_extractMesssageOptionActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SteganoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SteganoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SteganoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SteganoGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SteganoGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel PSNRVal;
    private javax.swing.ButtonGroup actionGroup;
    private javax.swing.JPanel actionPanel;
    private javax.swing.ButtonGroup algoGroup;
    private javax.swing.JTextField cryptoKey;
    private javax.swing.JLabel cryptoKeyLabel;
    private javax.swing.JCheckBox decryptCheckbox;
    private javax.swing.JCheckBox encryptCheckbox;
    private javax.swing.JButton executeButton;
    private javax.swing.JRadioButton extractMesssageOption;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel inputImageLabel;
    private javax.swing.JTextArea inputMessage;
    private javax.swing.JTextField inputThreshold;
    private javax.swing.JRadioButton insertMessageOption;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel keyLabel1;
    private javax.swing.JLabel keyLabel2;
    private javax.swing.JLabel keyLabel3;
    private javax.swing.JLabel keyLabel4;
    private javax.swing.JButton openImageButton;
    private javax.swing.JButton openMessageButton;
    private javax.swing.JLabel outputImageLabel;
    private javax.swing.JTextArea outputMessage;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton saveStegoImage;
    private javax.swing.JTextField stegoKey;
    private javax.swing.JLabel stegoKeyLabel;
    private javax.swing.ButtonGroup styleGroup;
    // End of variables declaration//GEN-END:variables
}
